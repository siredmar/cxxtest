/*******************************************************************************
 ********************************************************************************
 **                                                                            **
 ** ABCC Starter Kit version 3.02.02 (2016-11-10)                              **
 **                                                                            **
 ** Delivered with:                                                            **
 **    ABP            7.31.01 (2016-09-16)                                     **
 **    ABCC Driver    5.02.01 (2016-11-02)                                     **
 **                                                                            */
/*******************************************************************************
 ********************************************************************************
 ** COPYRIGHT NOTIFICATION (c) 2015 HMS Industrial Networks AB                 **
 **                                                                            **
 ** This code is the property of HMS Industrial Networks AB.                   **
 ** The source code may not be reproduced, distributed, or used without        **
 ** permission. When used together with a product from HMS, permission is      **
 ** granted to modify, reproduce and distribute the code in binary form        **
 ** without any restrictions.                                                  **
 **                                                                            **
 ** THE CODE IS PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND. HMS DOES NOT    **
 ** WARRANT THAT THE FUNCTIONS OF THE CODE WILL MEET YOUR REQUIREMENTS, OR     **
 ** THAT THE OPERATION OF THE CODE WILL BE UNINTERRUPTED OR ERROR-FREE, OR     **
 ** THAT DEFECTS IN IT CAN BE CORRECTED.                                       **
 ********************************************************************************
 ********************************************************************************
 ** Example of an ADI setup with 32 ADIs each one holding a 16 bit value.
 **
 ** In abcc_drv_cfg.h make sure that the following definitions are set to:
 ** ABCC_CFG_STRUCT_DATA_TYPE     ( FALSE )
 ** ABCC_CFG_ADI_GET_SET_CALLBACK ( TRUE )
 ********************************************************************************
 ********************************************************************************
 */

#include "../example_app/appl_adi_config.h"
#include "profibus.h"
#include "Std_Types.h"

#if ( APPL_ACTIVE_ADI_SETUP == APPL_ADI_SETUP_SEPARATE_16 )

/*******************************************************************************
 ** Constants
 ********************************************************************************
 */


extern struct ProtAnaBinIstAll glob_ana_bin_ist_all;

/*------------------------------------------------------------------------------
 ** Access descriptor for the ADIs
 **------------------------------------------------------------------------------
 */
#define APPL_READ_MAP_READ_ACCESS_DESC ( ABP_APPD_DESCR_GET_ACCESS |           \
        ABP_APPD_DESCR_MAPPABLE_READ_PD )

#define APPL_READ_MAP_WRITE_ACCESS_DESC ( ABP_APPD_DESCR_GET_ACCESS |          \
        ABP_APPD_DESCR_SET_ACCESS |          \
        ABP_APPD_DESCR_MAPPABLE_READ_PD )

#define APPL_WRITE_MAP_READ_ACCESS_DESC ( ABP_APPD_DESCR_GET_ACCESS |          \
        ABP_APPD_DESCR_MAPPABLE_WRITE_PD )

#define APPL_NOT_MAP_READ_ACCESS_DESC ( ABP_APPD_DESCR_GET_ACCESS |            \
        ABP_APPD_DESCR_MAPPABLE_WRITE_PD )

#define APPL_NOT_MAP_WRITE_ACCESS_DESC ( ABP_APPD_DESCR_GET_ACCESS |           \
        ABP_APPD_DESCR_SET_ACCESS )

/*******************************************************************************
 ** Typedefs
 ********************************************************************************
 */

/*******************************************************************************
 ** Private Globals
 ********************************************************************************
 */
/*------------------------------------------------------------------------------
 ** Forward declarations
 **------------------------------------------------------------------------------
 */
/*------------------------------------------------------------------------------
 ** Data holder for the ADI instances
 **------------------------------------------------------------------------------
 */

#define APPL_PROFINET_MOSI_SIZE   (16u)
#define APPL_PROFINET_MISO_SIZE    (48u)

UINT8 ProfinetMosiArray[APPL_PROFINET_MOSI_SIZE] = {0};
UINT8 ProfinetMisoArray[APPL_PROFINET_MISO_SIZE] = {0};

extern volatile struct SYSTEM *dig_system;
extern USER_STRUC sUser;
static void SetMosiData(const struct AD_AdiEntry* psAdiEntry, UINT8 bNumElements, UINT8 bStartIndex);
static void SetMisoData(const struct AD_AdiEntry* psAdiEntry, UINT8 bNumElements, UINT8 bStartIndex);
/*******************************************************************************
 ** Public Globals
 ********************************************************************************
 */

/*------------------------------------------------------------------------------
 ** 32 16-bit values individually
 ** See abcc_ad_if.h for a more detailed description.
 **------------------------------------------------------------------------------
 */
/*-----------------------------------------------------------------------------------------------------------------------
 ** iInstance | pabName | bDataType | bNumOfElements | bDesc | pxValuePtr | pxValuePropPtr| pnGetAdiValue | pnSetAdiValue
 **-----------------------------------------------------------------------------------------------------------------------
 */
const AD_AdiEntryType APPL_asAdiEntryList[] =
{
        {10, "Module Input", ABP_UINT8, APPL_PROFINET_MOSI_SIZE, APPL_READ_MAP_WRITE_ACCESS_DESC, {{ProfinetMosiArray, NULL}}, NULL, SetMosiData},
        {11, "Module Output", ABP_UINT8, APPL_PROFINET_MISO_SIZE, APPL_WRITE_MAP_READ_ACCESS_DESC, {{ProfinetMisoArray, NULL}}, SetMisoData, NULL },
};

/*
 **------------------------------------------------------------------------------
 ** Map all adi:s in both directions
 ** See abcc_ad_if.h for a more detailed description.
 **------------------------------------------------------------------------------
 ** 1. AD instance | 2. Direction | 3. Num elements | 4. Start index |
 **------------------------------------------------------------------------------
 */
const AD_DefaultMapType APPL_asAdObjDefaultMap[] =
{
        { 10,  PD_READ,  AD_DEFAULT_MAP_ALL_ELEM, 0 },  /* Marked as output slot in Profinet master */
        { 11,  PD_WRITE, AD_DEFAULT_MAP_ALL_ELEM, 0 },  /* Marked as input slot in Profinet master */
        { AD_DEFAULT_MAP_END_ENTRY }
};

/*******************************************************************************
 ** Private Services
 ********************************************************************************
 */
static void SetMisoData( const struct AD_AdiEntry* psAdiEntry, UINT8 bNumElements, UINT8 bStartIndex )
{
//    uint8 length = sizeof(sUser.abInput);
//    memcpy(ProfinetMisoArray, sUser.abInput, length);
    memcpy(ProfinetMisoArray, sUser.abInput, APPL_PROFINET_MISO_SIZE);
}

static void SetMosiData( const struct AD_AdiEntry* psAdiEntry, UINT8 bNumElements, UINT8 bStartIndex )
{
    uint8 length = 0u;

    /* Compatibility to Digureg I dataset */
//    if(GetParameterValueEnum(PROFIBUS_DATENSATZ_DIGUREG_I_KOMPATIBEL, 0) == 1)
    if(glob_ana_bin_ist_all.bin_ist_all.entries[PROFIBUS_DATENSATZ_DIGUREG_I_KOMPATIBEL].value == 0) // DIGUREG I - Datensatz
    {
        //length = sizeof(dig_system->istwerte.profibus_output_data_dig_i_struct);
//        memcpy(&dig_system->istwerte.profibus_output_data_dig_i_struct, ProfinetMosiArray, length);
        memcpy(&dig_system->istwerte.profibus_output_data_dig_i_struct, ProfinetMosiArray, APPL_PROFINET_MOSI_SIZE);
    }
    /* Compatibility to Digureg II dataset */
    else
    {
//        length = sizeof(dig_system->istwerte.profibus_output_data_dig_ii_struct);
//        memcpy(&dig_system->istwerte.profibus_output_data_dig_ii_struct, ProfinetMosiArray, length);
        length = sizeof(dig_system->istwerte.profibus_output_data_dig_ii_struct);
        memcpy(&dig_system->istwerte.profibus_output_data_dig_ii_struct, ProfinetMosiArray, APPL_PROFINET_MOSI_SIZE);
    }
}

/*******************************************************************************
 ** Public Services
 ********************************************************************************
 */
UINT16 APPL_GetNumAdi( void )
{
#if PROFINET_SOURCE!=EXAMPLE_NONE
    return( sizeof( APPL_asAdiEntryList ) / sizeof( AD_AdiEntryType ) );
#endif
}

void APPL_CyclicalProcessing( void )
{

}
/*******************************************************************************
 ** Tasks
 ********************************************************************************
 */
#endif

