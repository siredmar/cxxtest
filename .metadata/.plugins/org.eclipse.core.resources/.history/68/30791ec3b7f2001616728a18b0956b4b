/*
 * appl_events.c
 *
 *  Created on: 14.02.2017
 *      Author: ASchl
 */

#include "appl_events.h"

static void CreateDiagResponse (ABP_MsgType* psMsg);

ABCC_MsgHandlerFuncType *CreateDiagRespHdl(void);

typedef enum
{
    ABP_CHANNEL_DIAGNOSTIC = (0x8000u),
    ABP_CHANNEL_EXTENDED_DIAGNOSTIC = (0x8002u),
    ABP_CHANNEL_QUALIFIED_DIAGNOSTIC = (0x8003u),
} ABP_ChannelDiagnosticType;

typedef enum
{
    ABP_DIAGNOSTIC_APPEARING    = (0x0800u),
    ABP_DIAGNOSTIC_DISAPPEARING = (0x1000u),
} ABP_ChannelDiagnosticAppearenceType;

ABP_MsgErrorCodeType PRT_DIAG_CreateChannelDiagnosis
(
        UINT16 iSlot,
        UINT16 iADI,
        ABP_DiEventSeverityType eSeverity,
        //PRT_DIAG_DirectionType eDirection,
        UINT16 iChannelErrType,
        ABP_ChannelDiagnosticAppearenceType Appearance,
//        ABCC_MsgHandlerFuncType pnMsgHandler

)
{
    ABCC_ErrorCodeType eStatus;
    ABP_MsgType* psMsg;

    // allocate the message buffer
    psMsg = ABCC_GetCmdMsgBuffer ();

    // Message header part
    ABCC_SetMsgHeader (psMsg,      // buffer
            ABP_OBJ_NUM_DI,                // diagnostic object
            0,        // instance
            0,        // attribute
            ABP_CMD_CREATE,                          // command type
            22,                                      // message data size
            ABCC_GetNewSourceId ());                 // source id


    // severity and extended diagnostic
    psMsg->sHeader.bCmdExt0 = ((eSeverity << 4) & ABP_DI_CREATE_CMDEXT0_SEVERITY_BITS) | ABP_DI_CREATE_CMDEXT0_EXT_DIAG_BIT;
//            ABP_DI_EVENT_SEVERITY_MINOR_REC|ABP_DI_CREATE_CMDEXT0_EXT_DIAG_BIT;

    // event code Network Specific (0xFF)
    psMsg->sHeader.bCmdExt1 = ABP_DI_EVENT_NW_SPECIFIC;

    // Slot number associated to the event
    ABCC_SetMsgData16 (psMsg, iSlot, 0);
    // ADI associated to the event
    ABCC_SetMsgData16 (psMsg, iADI, 2);
    // Element (not used by the ABCC40-PIR)
    ABCC_SetMsgData8 (psMsg, 0, 4);
    // Bit (not used by the ABCC40-PIR)
    ABCC_SetMsgData8 (psMsg, 0, 5);
    // Reserved
    ABCC_SetMsgData16 (psMsg, 0, 6);

    // Message data part
    // UserStructureIdentifier = 0x8002 (Extended Channel Diagnostic)
    ABCC_SetMsgData16 (psMsg, 0x8002, 8);
    // ChannelNumber = 0x8000 (Set to 0-0x7FFF as specified by the manufacturer, or 0x8000 for whole submodule)
    ABCC_SetMsgData16 (psMsg, 0x8000, 10);

    // ChannelProperties = 0x0800
    // Not Accumulative: bit8 = 0
    // Maintenance=Failure: bit9 = 0, bit10 = 0
    // Specifier=Appears: bit11 = 1, bit12 = 00
    // Direction=In/Out: bit13 = 0, bit14 = 0, bit15 = 0
    ABCC_SetMsgData16 (psMsg, Appearance | 0x000, 12);


    // this is the channel error.
    // ChannelErrorType = 0x0100 (manufacturer specific).
    ABCC_SetMsgData16 (psMsg, iChannelErrType, 14);


    // Extended error type which is bound to the channel error.
    // ExtChannelErrorType = 0x0001 (manufacturer specific extension).
    ABCC_SetMsgData16 (psMsg, 0x0001, 16);

    // this is an additional error value which is bound to the extended error type
    // ExtChannelAddValue = 0x00000000
    ABCC_SetMsgData32 (psMsg, 0x00000000, 18);

    // a function pointer to handle response must be specified
    // pnMsgHandler function provides the status of the creation and the instance
    // number associated with the request
   // &CreateDiagRespHdl = pnMsgHandler;

    //sends a command message to the ABCC
    eStatus = ABCC_SendCmdMsg (psMsg, CreateDiagResponse);

    return (eStatus);
}

static void CreateDiagResponse (ABP_MsgType* psMsg)
{
    UINT16 iInstance;
    ABCC_GetMsgData16 (psMsg, &iInstance, 0);
   // if (CreateDiagRespHdl ! = NULL)
//    {
//        CreateDiagResp(! (ABCC_GetLowAddrOct (psMsg->sHeader.bCmd) & ABP_MSG_HEADER_E_BIT), iInstance);
//    }
}
