//**********************************************************************************************
// Modulname: start_bootloader.c	
//**********************************************************************************************
//
// Messumformer  - MUF
//
// Bearbeiter: Philipp Compensis
// Firma:      HSS Barschat & Krönert GBR
// Tel.:       09129 28520
//
// 
// start_bootloader.c beinhaltet die Funktion, die den Bootloader aufruft, diese Datei
// darf nicht optimiert werden!!!! Optimization-Level: "NONE"
// 
//**********************************************************************************************


//***************  INCLUDE-DATEIEN *******************************************
#include <intrinsics.h> // für __enable_interrupt()
#include <string.h> //für memcpy

#include "MUF.h"
#include "MUF.glb"

#include "LPC24xx_enet.h"
#include "watchdog.h"
#include "EEPROM.h"
#include "ethernet.h"

//******************************** Defines ************************************


//******************************** Externe Variablen ************************************
extern volatile struct BOOTLOADER_UPDATE_DATA bootloader_update_data __attribute__ ((section(".user_data"), aligned(4)));

//********************************  Strukturen  ********************************

/*******************************************************************************
* StartBootloaderUpdateModus
* 
* Starten den Bootloader im Update-Modus
* 
*******************************************************************************/
void StartBootloaderUpdateModus()
{
    pFunction   JumpToBootLoader;
    u32_t       jump_address;
    
    // Flag setzen, der dem SecondaryBootloader anzeigt, dass ein Update vorliegt
    bootloader_update_data.update_daten_vorhanden = TRUE;

    // Adresse des BootLoaders setzen
    jump_address = BOOTLOADER_UPDATE_START_SECTOR_ADDRESS;   
       
    // Startfunktion der Firmware anlegen
    JumpToBootLoader = (pFunction)jump_address;

    // Watchdog deaktivieren
    SetDisableWatchdog();

    // Interrupts immer deaktivieren, da die aufrufende Firmware, diese vorher aktiviert haben könnte und
    // dies zu Problemen führt
    __disable_interrupt();

    SYSTEM_LED_ON();
    FEHLER_LED_ON();

    // BootLoader aufrufen, der das Update durchführen wird
    JumpToBootLoader();
}
/*******************************************************************************
* ENDE StartBootloaderUpdateModus
*******************************************************************************/
