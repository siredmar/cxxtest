//******************************************************************************
// Modulname: ethernet	
//******************************************************************************
//
// Messumformer  - MUF
//
// Bearbeiter: Philipp Compensis
// Firma:      HSS Barschat & Krönert GBR
// Tel.:       09129 28520
// 
//******************************************************************************


//
//********************************  Defines  ********************************
//
#define COMM_ID_UPDATE_START_BEFEHL      1000
#define MAX_UDP_BEFEHL_DATA_LENGTH    (32 + 1) // Maximale Stringlänge + '\0'
#define MAX_SIZE_DATENFRAME sizeof(struct DATENFRAME_MODUS2_STRUCT)

#define KEIN_KOMMANDO 0
//
//********************************  Strukturen  ********************************
//

struct ProtBefehl
{
    UInt16 comm_id;
    byte   data[MAX_UDP_BEFEHL_DATA_LENGTH];
    UInt32 checksum; // Das letzte Byte muss die Checksumme sein
}__attribute__((packed));

struct MAC_ADR_STRUCT
{
	u8_t mac1;	
	u8_t mac2;
	u8_t mac3;
	u8_t mac4;
	u8_t mac5;
	u8_t mac6;
}__attribute__((packed));

struct HEADER_HEADER_STRUCT {
	struct MAC_ADR_STRUCT		dest_mac_adr;
	struct MAC_ADR_STRUCT		src_mac_adr;
	u16_t 						type;
}__attribute__((packed));

struct IP_HEADER_STRUCT {
   u8_t		   ip_version_header_length;
   u8_t        ip_tos_ecn;
   u16_t       ip_len;				//Länge des gesamten Pakets (inkl. Kopfdaten) in Bytes
   u16_t       ip_id;				//Identification  (für das Zusammensetzen von zuvor fragmentierten IP-Datenpaketen)
   u16_t       ip_off; 				//Fragment Offset 
   u8_t        ip_ttl; 				//Time to Live
   u8_t        ip_protocol_typ;
   u16_t       ip_checksum;
   u32_t       ip_src;				//Quell-IP-Adresse
   u32_t       ip_dst;				//Ziel-IP-Adresse
}__attribute__((packed));

struct UDP_HEADER_STRUCT 
{
	u16_t  source_port;
	u16_t  destination_port;
	u16_t  length;
	u16_t  checksum;
}__attribute__((packed));

struct ETHERNET_UDP_MESSAGE_FRAME_STRUCT
{
    struct HEADER_HEADER_STRUCT ethernet_header;
    struct IP_HEADER_STRUCT     ip_header;
    struct UDP_HEADER_STRUCT    udp_header;
    //Für Daten reservierter Platz im Ethernetframe:
    struct ProtBefehl           udp_data;
}__attribute__((packed));

struct ETHERNET_FRAME_STRUCT
{
    struct HEADER_HEADER_STRUCT ethernet_header;
	struct IP_HEADER_STRUCT  	ip_header;
	struct UDP_HEADER_STRUCT    udp_header;
    u8_t                        daten[MAX_SIZE_DATENFRAME];     //Für Daten reservierter Platz im Ethernetframe
    u8_t                        size_of_daten;                  //Größe des Bereichs der tatsächlich mit Daten befüllt wurde
}__attribute__((packed));

struct ARP_REQUEST_STRUCT
{
	//Ethernet-Header
	struct MAC_ADR_STRUCT		eth_dest_mac_adr;
	struct MAC_ADR_STRUCT		eth_src_mac_adr;
	u16_t 						type;
	//ARP-Nachricht				
	u16_t						hardware_type;
	u16_t						protocol_type;
	u8_t						hardware_address_length;
	u8_t						protocol_address_length;
	u16_t						operation;
	struct MAC_ADR_STRUCT		arp_src_mac_adr;	//Quell-MAC-Adresse
	u32_t    				    ip_src;			//Quell-IP-Adresse
	struct MAC_ADR_STRUCT		arp_dest_mac_adr;	//Ziel-MAC-Adresse
	u32_t    				    ip_dest;		//Ziel-IP-Adresse
}__attribute__((packed));

//
//***************  Funktions-Prototypen  ***************************************
//
void    SetConfigByteEthernet(u8_t config_byte);
BOOLEAN InitEthernet(void);
BOOLEAN SetEthernetTx(void);
void    SetDatenFrameModus1(struct MESSWERTE_STRUCT *messwerte, u8_t fehler_byte, int16_t info);
void    SetDatenFrameModus2(struct  BERECHNUNG       *berechnung, 
                            struct  MESSWERTE_STRUCT *messwerte, 
                            float                    frequenz, 
                            float                    fcomp,
                            u8_t                     fehler_byte, 
                            int16_t                  info,
                            BOOLEAN                  fcomp_bildung_gestoert, 
                            BOOLEAN                  fcomp_schwelle_unterschritten,
                            float                    fcomp_gefiltert,               //V.2.3.1
                            float                    p_gefilter,                    //V.3.0.1
                            struct ALPHA_BETA        *alfa_beta);
void    SetUDPFrameChecksum(void);
void    SetMACAddress();
u16_t 	htons(u16_t in);
u32_t	htonl(u32_t in);
u16_t 	GetIPHeaderChecksum(u16_t *ptr, u32_t len);
BOOLEAN GetDestMACAdrViaARP(struct MAC_ADR_STRUCT *src_mac_adr, u32_t dest_ip, struct MAC_ADR_STRUCT *dest_mac_adr);
void    SetIPHeader (struct IP_HEADER_STRUCT *ip_header,u8_t size_of_daten);
u16_t   GetUDPChecksum(struct UDP_HEADER_STRUCT *udp_header, u32_t ip_src, u32_t ip_dst, u8_t size_of_daten);
void    CheckUpdateUDPMessage(); // CAggou - v3.4 - 04.09.2013
void    SendFWVersion(struct ETHERNET_UDP_MESSAGE_FRAME_STRUCT *ethernet_frame); // CAggou - v3.4 - 11.09.2013
